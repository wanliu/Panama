#encoding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ShopsController do

  let(:pepsi) { Shop.create! valid_attributes }

  def valid_attributes
    {
      :name => "某某商店",
      :user => get_session[:user]
    }
  end


  describe "GET index" do
    it "assigns all shops as @shops" do
      shop = Shop.create! valid_attributes
      get :index, {}, get_session
      assigns(:shops).should eq([shop])
    end
  end

  describe "GET show" do
    it "assigns the requested shop as @shop" do
      shop = Shop.create! valid_attributes
      get :show, {:id => shop.to_param}, get_session
      assigns(:shop).should eq(shop)
    end
  end

  describe "GET new" do
    it "assigns a new shop as @shop" do
      get :new, {}, get_session
      assigns(:shop).should be_a_new(Shop)
    end
  end

  describe "GET edit" do
    it "assigns the requested shop as @shop" do
      shop = Shop.create! valid_attributes
      get :edit, {:id => shop.to_param}, get_session
      assigns(:shop).should eq(shop)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      let(:current_user) { get_session[:user] }
      let(:shop_attributes) {{ name: 'shop_test', user_id: current_user.id }}

      it "creates a new Shop" do
        expect {
          post :create, {:shop => shop_attributes}, get_session
        }.to change(Shop, :count).by(1)
      end

      it "assigns a newly created shop as @shop" do
        post :create, {:shop => shop_attributes}, get_session
        assigns(:shop).should be_a(Shop)
        assigns(:shop).should be_persisted
      end

      it "redirects to the created shop" do
        post :create, {:shop => shop_attributes}, get_session
        response.should redirect_to(Shop.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved shop as @shop" do
        # Trigger the behavior that occurs when invalid params are submitted
        Shop.any_instance.stub(:save).and_return(false)
        post :create, {:shop => {  }}, get_session
        assigns(:shop).should be_a_new(Shop)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Shop.any_instance.stub(:save).and_return(false)
        post :create, {:shop => {  }}, get_session
        response.should render_template("new")
      end
    end
  end

  describe "更新操作" do


    describe "有效参数" do
      let(:shop_attributes) {{ name: 'shop_test' }}

      it "更新请求的 shop" do
        # Assuming there are no other shops in the database, this
        # specifies that the Shop created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Shop.any_instance.should_receive(:update_attributes).with({ "name" => "apple" })
        put :update, {:id => pepsi.to_param, :shop => { "name" => "apple" }}, get_session
      end

      it "assigns the requested shop as @shop" do
        put :update, {:id => pepsi.to_param, :shop => shop_attributes}, get_session
        assigns(:shop).should eq(pepsi)
      end

      it "redirects to the shop" do
        shop_attributes = pepsi.attributes.slice(:name)

        put :update, {:id => pepsi.to_param, :shop => shop_attributes}, get_session
        response.should redirect_to(pepsi)
      end
    end

    describe "无效参数" do
      let(:invalid_attributes) {{ :name => nil }}

      it "分配 shop 为 @shop" do
        # Trigger the behavior that occurs when invalid params are submitted
        Shop.any_instance.stub(:save).and_return(false)
        put :update, {:id => pepsi.to_param, :shop => invalid_attributes }, get_session
        assigns(:shop).should eq(pepsi)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Shop.any_instance.stub(:save).and_return(false)
        put :update, {:id => pepsi.to_param, :shop => invalid_attributes }, get_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested shop" do
      shop = Shop.create! valid_attributes
      expect {
        delete :destroy, {:id => shop.to_param}, get_session
      }.to change(Shop, :count).by(-1)
    end

    it "redirects to the shops list" do
      shop = Shop.create! valid_attributes
      delete :destroy, {:id => shop.to_param}, get_session
      response.should redirect_to(shops_url)
    end
  end

end
